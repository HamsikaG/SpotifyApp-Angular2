{
  "_args": [
    [
      {
        "raw": "angular-in-memory-web-api@~0.3.0",
        "scope": null,
        "escapedName": "angular-in-memory-web-api",
        "name": "angular-in-memory-web-api",
        "rawSpec": "~0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "C:\\Users\\hamsi\\Desktop\\Projects\\ngspotify"
    ]
  ],
  "_from": "angular-in-memory-web-api@>=0.3.0 <0.4.0",
  "_id": "angular-in-memory-web-api@0.3.2",
  "_inCache": true,
  "_location": "/angular-in-memory-web-api",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/angular-in-memory-web-api-0.3.2.tgz_1493751873597_0.9235089097637683"
  },
  "_npmUser": {
    "name": "wardbell",
    "email": "wardbell@hotmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular-in-memory-web-api@~0.3.0",
    "scope": null,
    "escapedName": "angular-in-memory-web-api",
    "name": "angular-in-memory-web-api",
    "rawSpec": "~0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/angular-in-memory-web-api/-/angular-in-memory-web-api-0.3.2.tgz",
  "_shasum": "8836d9e2534d37b728f3cb5a1caf6fe1e7fbbecd",
  "_shrinkwrap": null,
  "_spec": "angular-in-memory-web-api@~0.3.0",
  "_where": "C:\\Users\\hamsi\\Desktop\\Projects\\ngspotify",
  "author": "",
  "bugs": {
    "url": "https://github.com/angular/in-memory-web-api/issues"
  },
  "dependencies": {},
  "description": "An in-memory web api for Angular demos and tests",
  "devDependencies": {
    "@angular/common": "~2.4.0",
    "@angular/compiler": "~2.4.0",
    "@angular/compiler-cli": "~2.4.0",
    "@angular/core": "~2.4.0",
    "@angular/http": "~2.4.0",
    "@angular/platform-browser": "~2.4.0",
    "@angular/platform-server": "~2.4.0",
    "@types/jasmine": "2.5.36",
    "@types/node": "^6.0.46",
    "canonical-path": "0.0.2",
    "concurrently": "^3.0.0",
    "core-js": "^2.4.1",
    "del": "^2.2.2",
    "gulp": "^3.9.1",
    "gulp-bump": "^2.4.0",
    "gulp-load-plugins": "^1.3.0",
    "gulp-task-listing": "^1.0.1",
    "gulp-util": "^3.0.7",
    "http-server": "^0.9.0",
    "jasmine-core": "~2.5.2",
    "karma": "^1.3.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-cli": "^1.0.1",
    "karma-htmlfile-reporter": "^0.3.4",
    "karma-jasmine": "^1.0.2",
    "karma-jasmine-html-reporter": "^0.2.2",
    "lite-server": "^2.2.2",
    "lodash": "^4.16.2",
    "rimraf": "^2.5.4",
    "rollup": "^0.36.0",
    "rollup-stream": "^1.14.0",
    "rxjs": "^5.0.1",
    "tslint": "^3.15.1",
    "typescript": "~2.0.10",
    "vinyl-source-stream": "^1.1.0",
    "yargs": "^5.0.0",
    "zone.js": "^0.7.2"
  },
  "directories": {},
  "dist": {
    "shasum": "8836d9e2534d37b728f3cb5a1caf6fe1e7fbbecd",
    "tarball": "https://registry.npmjs.org/angular-in-memory-web-api/-/angular-in-memory-web-api-0.3.2.tgz"
  },
  "gitHead": "70b412dd0b31275449e296e783bacb00502d7b5c",
  "homepage": "https://github.com/angular/in-memory-web-api#readme",
  "keywords": [],
  "license": "MIT",
  "main": "bundles/in-memory-web-api.umd.js",
  "maintainers": [
    {
      "name": "filipesilva",
      "email": "filipematossilva@gmail.com"
    },
    {
      "name": "foxandxss",
      "email": "Foxandxss@gmail.com"
    },
    {
      "name": "wardbell",
      "email": "wardbell@hotmail.com"
    }
  ],
  "module": "index.js",
  "name": "angular-in-memory-web-api",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/core": ">=2.0.0 <5.0.0 || >=4.0.0-beta <5.0.0",
    "@angular/http": ">=2.0.0 <5.0.0 || >=4.0.0-beta <5.0.0",
    "rxjs": "^5.0.1"
  },
  "readme": "# Angular in-memory-web-api\n[![Build Status][travis-badge]][travis-badge-url]\n\nAn in-memory web api for Angular demos and tests.\n\nIt intercepts Angular `Http` requests that would otherwise go to the remote server\nvia the Angular `XHRBackend` service\n\n>**LIMITATIONS**\n>\n>The _in-memory-web-api_ exists primarily to support the \n[Angular documentation](https://angular.io/docs/ts/latest/ \"Angular documentation web site\").\nIt is not supposed to emulate every possible real world web API and is not intended for production use.\n>\n>Most importantly, it is ***always experimental***. \nWe will make breaking changes and we won't feel bad about it \nbecause this is a development tool, not a production product. \nWe do try to tell you about such changes in the `CHANGELOG.md`\nand we fix bugs as fast as we can.\n\n\n>**UPDATE NOTICE**\n>\n>As of v.0.1.0, the npm package was renamed from `angular2-in-memory-web-api` to its current name,\n`angular-in-memory-web-api`. All versions ***after 0.0.21*** are shipped under this name.\n**Be sure to update your `package.json` and import statements**.\n\n## HTTP request handling\nThis in-memory web api service processes an HTTP request and \nreturns an `Observable` of HTTP `Response` object\nin the manner of a RESTy web api.\nIt natively handles URI patterns in the form `:base/:collectionName/:id?`\n\nExamples:\n```\n  // for requests to an `api` base URL that gets heroes from a 'heroes' collection \n  GET api/heroes          // all heroes\n  GET api/heroes/42       // the character with id=42\n  GET api/heroes?name=^j  // 'j' is a regex; returns heroes whose name starting with 'j' or 'J'\n  GET api/heroes.json/42  // ignores the \".json\"\n```\n<a id=\"commands\"></a>\n## Commands\n\nThe service also accepts \"commands\" that can, for example, reconfigure the service and reset the database.\n\nWhen the last segment of the _api base path_ is \"commands\", the `collectionName` is treated as the _command_.\nExample URLs:\n```\n  commands/resetdb   // Reset the \"database\" to its original state\n  commands/config    // Get or update this service's config object\n```\n\nCommands are \"hot\", meaning they are always executed immediately\nwhether or not someone subscribes to the returned observable.\n\nUsage:\n```\n  http.post('commands/resetdb', undefined);\n  http.get('commands/config');\n  http.post('commands/config', '{\"delay\":1000}');\n```\n\n## Basic usage\nCreate an `InMemoryDataService` class that implements `InMemoryDbService`.\n\nAt minimum it must implement `createDb` which \ncreates a \"database\" hash whose keys are collection names\nand whose values are arrays of collection objects to return or update.\nFor example:\n```ts\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\n\nexport class InMemHeroService implements InMemoryDbService {\n  createDb() {\n    let heroes = [\n      { id: '1', name: 'Windstorm' },\n      { id: '2', name: 'Bombasto' },\n      { id: '3', name: 'Magneta' },\n      { id: '4', name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n}\n```\n\nRegister this module and your service implementation in `AppModule.imports`\ncalling the `forRoot` static method with this service class and optional configuration object:\n```ts\n// other imports\nimport { HttpModule }           from '@angular/http';\nimport { InMemoryWebApiModule } from 'angular-in-memory-web-api';\n\nimport { InMemHeroService }     from '../app/hero-data';\n@NgModule({\n imports: [\n   HttpModule,\n   InMemoryWebApiModule.forRoot(InMemHeroService),\n   ...\n ],\n ...\n})\nexport class AppModule { ... }\n```\n\nSee examples in the Angular.io such as the\n[Server Communication](https://angular.io/docs/ts/latest/guide/server-communication.html) and\n[Tour of Heroes](https://angular.io/docs/ts/latest/tutorial/toh-pt6.html) chapters.\n\n>Always import the `InMemoryWebApiModule` _after_ the `HttpModule` to ensure that \nthe `XHRBackend` provider of the `InMemoryWebApiModule` supersedes all others.\n\n# Bonus Features\nSome features are not readily apparent in the basic usage example.\n\nThe `InMemoryBackendConfigArgs` defines a set of options. Add them as the second `forRoot` argument:\n```ts\n  InMemoryWebApiModule.forRoot(InMemHeroService, { delay: 500 }),\n```\n\n**Read the `InMemoryBackendConfigArgs` interface to learn about these options**.\n\n\n## Request evaluation order\nThis service can evaluate requests in multiple ways depending upon the configuration.\nHere's how it reasons:\n1. If it looks like a [command](#commands), process as a command\n2. If the [HTTP method is overridden](#method-override) \n3. If the resource name (after the api base path) matches one of the configured collections, process that\n4. If not but the `Config.passThruUnknownUrl` flag is `true`, try to [pass the request along to a real _XHRBackend_](#passthru).\n5. Return a 404.\n\nSee the `handleRequest` method implementation for details.\n\n## Default delayed response\n\nBy default this service adds a 500ms delay (see `InMemoryBackendConfig.delay`) \nto all requests to simulate round-trip latency.\nYou can eliminate that or extend it by setting a different value:\n```ts\n  InMemoryWebApiModule.forRoot(InMemHeroService, { delay: 0 }),    // no delay\n  InMemoryWebApiModule.forRoot(InMemHeroService, { delay: 1500 }), // 1.5 second delay\n```\n\n## Simple query strings\nPass custom filters as a regex pattern via query string. \nThe query string defines which property and value to match.\n\nFormat: `/app/heroes/?propertyName=regexPattern`\n\nThe following example matches all names start with the letter 'j'  or 'J' in the heroes collection.\n\n`/app/heroes/?name=^j`\n\n>Search pattern matches are case insensitive by default. \nSet `config.caseSensitiveSearch = true` if needed.\n\n<a id=\"passthru\"></a>\n## Pass thru to a live _XHRBackend_\n\nIf an existing, running remote server should handle requests for collections \nthat are not in the in-memory database, set `Config.passThruUnknownUrl: true`.\nThis service will forward unrecognized requests via a base version of the Angular `XHRBackend`.\n\n## _parseUrl_ and your override\n\nThe `parseUrl` parses the request URL into a `ParsedUrl` object.\n`ParsedUrl` is a public interface whose properties guide the in-memory web api\nas it processes the request.\n\n### Default _parseUrl_\n\nDefault parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\nRead the source code for the complete story.\n\nConfiguring the `apiBase` yields the most interesting changes to `parseUrl` behavior:\n\n* For `apiBase=undefined` and `url='http://localhost/api/customers/42'`\n    ```\n    {base: 'api/', collectionName: 'customers', id: '42', ...}\n    ```\n\n*  For `apiBase='some/api/root/'` and `url='http://localhost/some/api/root/customers'`\n    ```\n    {base: 'some/api/root/', collectionName: 'customers', id: undefined, ...}\n    ```\n\n*  For `apiBase='/'` and `url='http://localhost/customers'`\n    ```\n    {base: '/', collectionName: 'customers', id: undefined, ...}\n    ```\n\n**The actual api base segment values are ignored**. Only the number of segments matters.\nThe following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n\nThis means that URLs that work with the in-memory web api may be rejected by the real server.\n\n### Custom _parseUrl_\n\nYou can override the default by implementing a `parseUrl` method in your `InMemoryDbService`.\nSuch a method must take the incoming request URL string and return a `ParsedUrl` object. \n\nAssign your alternative to `InMemDbService['parseUrl']`\n\n## _responseInterceptor_\n\nYou can morph the response returned by the default HTTP methods, called by `collectionHandler`, \nto suit your needs by adding a `responseInterceptor` method to your `InMemoryDbService` class. \nThe `collectionHandler` calls your interceptor like this:\n```ts\nresponseOptions = this.responseInterceptor(responseOptions, requestInfo);\n```\n\n<a id=\"method-override\"></a>\n## HTTP method interceptors\n\nIf you make requests this service can't handle but still want an in-memory database to hold values,\noverride the way this service handles any HTTP method by implementing a method in\nyour `InMemoryDbService` that does the job.\n\nThe `InMemoryDbService` method name must be the same as the HTTP method name but **all lowercase**.\nThis service calls it with an `HttpMethodInterceptorArgs` object.\nFor example, your HTTP GET interceptor would be called like this:\ne.g., `yourInMemDbService[\"get\"](interceptorArgs)`.\nYour method must **return an `Observable<Response>`** which _should be \"cold\"_.\n\nThe `HttpMethodInterceptorArgs` (as of this writing) are:\n```ts\nrequestInfo: RequestInfo;           // parsed request\ndb: Object;                         // the current in-mem database collections\nconfig: InMemoryBackendConfigArgs;  // the current config\npassThruBackend: ConnectionBackend; // pass through backend, if it exists\n```\n## Examples\n\nThe file `examples/hero-data.service.ts` is an example of a Hero-oriented `InMemoryDbService`,\nderived from the [HTTP Client](https://angular.io/docs/ts/latest/guide/server-communication.html) \nsample in the Angular documentation.\n\nTo try it, add the following line to `AppModule.imports`\n```ts\nInMemoryWebApiModule.forRoot(HeroDataService)\n```\n  \nThat file also has a `HeroDataOverrideService` derived class that demonstrates overriding\nthe `parseUrl` method and it has a \"cold\" HTTP GET interceptor.\n\nAdd the following line to `AppModule.imports` to see this version of the data service in action:\n```ts\nInMemoryWebApiModule.forRoot(HeroDataOverrideService)\n```\n\n# To Do\n* add tests (shameful omission!)\n\n# Build Instructions\n\nMostly gulp driven.\n\nThe following describes steps for updating from one Angular version to the next\n\n>This is essential even when there are no changes of real consequence.\nNeglecting to synchronize Angular 2 versions\ntriggers typescript definition duplication error messages when\ncompiling your application project.\n\n- `gulp bump` - up the package version number\n\n- update `CHANGELOG.MD` to record the change\n\n- update the dependent version(s) in `package.json`\n\n- `npm install` the new package(s) (make sure they really do install!)<br>\n   `npm list --depth=0`\n\n- consider updating typings, install individually/several:\n```\n  npm install @types/jasmine @types/node --save-dev\n```\n\n- `gulp clean` - clear out all generated `text`\n\n- `npm run tsc` to confirm the project compiles w/o error (sanity check)\n\n -- NO TESTS YET ... BAD --\n\n- `gulp build`\n- commit and push\n\n- `npm publish`\n\n- Fix and validate angular.io docs samples\n\n- Add two tags to the release commit with for unpkg\n  - the version number\n  - 'latest'\n\n[travis-badge]: https://travis-ci.org/angular/in-memory-web-api.svg?branch=master\n[travis-badge-url]: https://travis-ci.org/angular/in-memory-web-api\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular/in-memory-web-api.git"
  },
  "scripts": {
    "build-and-test": "concurrently  \"npm run tsc\" \"npm run test\"",
    "http-server": "tsc && http-server",
    "lint": "tslint ./src/*.ts -t verbose -e ./src/*.d.ts",
    "lite": "lite-server",
    "live": "live-server",
    "ngc": "ngc",
    "start": "concurrently \"npm run tsc:w\" \"npm run lite\" ",
    "test": "karma start karma.conf.js",
    "tsc": "tsc",
    "tsc:w": "tsc -w"
  },
  "version": "0.3.2"
}
