{
  "_args": [
    [
      {
        "raw": "concurrently@^3.2.0",
        "scope": null,
        "escapedName": "concurrently",
        "name": "concurrently",
        "rawSpec": "^3.2.0",
        "spec": ">=3.2.0 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\hamsi\\Desktop\\Projects\\ngspotify"
    ]
  ],
  "_from": "concurrently@>=3.2.0 <4.0.0",
  "_id": "concurrently@3.4.0",
  "_inCache": true,
  "_location": "/concurrently",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/concurrently-3.4.0.tgz_1488425255418_0.17213288904167712"
  },
  "_npmUser": {
    "name": "gustavohenke",
    "email": "guhenke@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "concurrently@^3.2.0",
    "scope": null,
    "escapedName": "concurrently",
    "name": "concurrently",
    "rawSpec": "^3.2.0",
    "spec": ">=3.2.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/concurrently/-/concurrently-3.4.0.tgz",
  "_shasum": "60662b3defde07375bae19aac0ab780ec748ba79",
  "_shrinkwrap": null,
  "_spec": "concurrently@^3.2.0",
  "_where": "C:\\Users\\hamsi\\Desktop\\Projects\\ngspotify",
  "author": {
    "name": "Kimmo Brunfeldt"
  },
  "bin": {
    "concurrent": "./src/main.js",
    "concurrently": "./src/main.js"
  },
  "bugs": {
    "url": "https://github.com/kimmobrunfeldt/concurrently/issues"
  },
  "dependencies": {
    "chalk": "0.5.1",
    "commander": "2.6.0",
    "date-fns": "^1.23.0",
    "lodash": "^4.5.1",
    "rx": "2.3.24",
    "spawn-command": "^0.0.2-1",
    "supports-color": "^3.2.3",
    "tree-kill": "^1.1.0"
  },
  "description": "Run commands concurrently",
  "devDependencies": {
    "chai": "^1.10.0",
    "mocha": "^2.1.0",
    "mustache": "^1.0.0",
    "releasor": "^1.2.1",
    "semver": "^4.2.0",
    "shell-quote": "^1.4.3",
    "shelljs": "^0.3.0",
    "string": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "60662b3defde07375bae19aac0ab780ec748ba79",
    "tarball": "https://registry.npmjs.org/concurrently/-/concurrently-3.4.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "072bdf20687dec8317181a254a3e5c3dd0467a4b",
  "homepage": "https://github.com/kimmobrunfeldt/concurrently",
  "keywords": [
    "bash",
    "concurrent",
    "parallel",
    "concurrently",
    "command",
    "sh"
  ],
  "license": "MIT",
  "main": "src/main.js",
  "maintainers": [
    {
      "name": "gustavohenke",
      "email": "guhenke@gmail.com"
    },
    {
      "name": "kimmobrunfeldt",
      "email": "kimmo.brunfeldt@gmail.com"
    }
  ],
  "name": "concurrently",
  "optionalDependencies": {},
  "readme": "# Concurrently\n\n[![Travis Build Status](https://travis-ci.org/kimmobrunfeldt/concurrently.svg)](https://travis-ci.org/kimmobrunfeldt/concurrently) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/kimmobrunfeldt/concurrently?branch=master&svg=true)](https://ci.appveyor.com/project/kimmobrunfeldt/concurrently) *master branch status*\n\n[![NPM Badge](https://nodei.co/npm/concurrently.png?downloads=true)](https://www.npmjs.com/package/concurrently)\n\nRun multiple commands concurrently.\nLike `npm run watch-js & npm run watch-less` but better.\n\n![](docs/demo.gif)\n\n**Features:**\n\n* Cross platform, works also in Windows\n* Output is easy to follow with prefixes\n* With `--kill-others` switch, all commands are killed if one dies\n* Spawns commands with [spawn-command](https://github.com/mmalecki/spawn-command)\n\n## Install\n\nThe tool is written in Node.js, but you can use it to run **any** commands.\n\n```bash\nnpm install -g concurrently\n```\n\nor if you are using it from npm scripts:\n\n```bash\nnpm install concurrently --save\n```\n\n## Usage\n\nRemember to surround separate commands with quotes, like this:\n```bash\nconcurrently \"command1 arg\" \"command2 arg\"\n```\n\nOtherwise **concurrently** would try to run 4 separate commands:\n`command1`, `arg`, `command2`, `arg`.\n\nIn package.json, escape quotes:\n\n```bash\n\"start\": \"concurrently \\\"command1 arg\\\" \\\"command2 arg\\\"\"\n```\n\nGood frontend one-liner example [here](https://github.com/kimmobrunfeldt/dont-copy-paste-this-frontend-template/blob/5cd2bde719654941bdfc0a42c6f1b8e69ae79980/package.json#L9).\n\nHelp:\n\n```\n\nUsage: concurrently [options] <command ...>\n\nOptions:\n\n  -h, --help                       output usage information\n  -V, --version                    output the version number\n  -k, --kill-others                kill other processes if one exits or dies\n  --no-color                       disable colors from logging\n  -p, --prefix <prefix>            prefix used in logging for each process.\n  Possible values: index, pid, time, command, name, none, or a template. Default: index. Example template: \"{time}-{pid}\"\n\n  -n, --names <names>              List of custom names to be used in prefix template.\n  Example names: \"main,browser,server\"\n\n  --name-separator <char>          The character to split <names> on.\n  Default: \",\". Example usage: concurrently -n \"styles,scripts|server\" --name-separator \"|\" <command ...>\n\n  -c, --prefix-colors <colors>     Comma-separated list of chalk colors to use on prefixes. If there are more commands than colors, the last color will be repeated.\n  Available modifiers: reset, bold, dim, italic, underline, inverse, hidden, strikethrough\n  Available colors: black, red, green, yellow, blue, magenta, cyan, white, gray\n  Available background colors: bgBlack, bgRed, bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite\n  See https://www.npmjs.com/package/chalk for more information.\n  Default: \"gray.dim\". Example: \"black.bgWhite,cyan,gray.dim\"\n\n  -t, --timestamp-format <format>  specify the timestamp in moment/date-fns format. Default: YYYY-MM-DD HH:mm:ss.SSS\n\n  -r, --raw                        output only raw output of processes, disables prettifying and concurrently coloring\n  -s, --success <first|last|all>   Return exit code of zero or one based on the success or failure of the \"first\" child to terminate, the \"last\" child, or succeed  only if \"all\" child processes succeed. Default: all\n\n  -l, --prefix-length <length>     limit how many characters of the command is displayed in prefix.\n  The option can be used to shorten long commands.\n  Works only if prefix is set to \"command\". Default: 10\n\n\nExamples:\n\n - Kill other processes if one exits or dies\n\n     $ concurrently --kill-others \"grunt watch\" \"http-server\"\n\n - Output nothing more than stdout+stderr of child processes\n\n     $ concurrently --raw \"npm run watch-less\" \"npm run watch-js\"\n\n - Normal output but without colors e.g. when logging to file\n\n     $ concurrently --no-color \"grunt watch\" \"http-server\" > log\n\n - Custom prefix\n\n     $ concurrently --prefix \"{time}-{pid}\" \"npm run watch\" \"http-server\"\n\n - Custom names and colored prefixes\n\n     $ concurrently --prefix \"[{name}]\" --names \"HTTP,WATCH\" -c \"bgBlue.bold,bgMagenta.bold\" \"npm run watch\" \"http-server\"\n\nFor more details, visit https://github.com/kimmobrunfeldt/concurrently\n```\n\n## FAQ\n\n* Process exited with code *null*?\n\n    From [Node child_process documentation](http://nodejs.org/api/child_process.html#child_process_event_exit), `exit` event:\n\n    > This event is emitted after the child process ends. If the process\n    > terminated normally, code is the final exit code of the process,\n    > otherwise null. If the process terminated due to receipt of a signal,\n    > signal is the string name of the signal, otherwise null.\n\n\n    So *null* means the process didn't terminate normally. This will make **concurrent**\n    to return non-zero exit code too.\n\n\n## Why\n\nI like [task automation with npm](http://substack.net/task_automation_with_npm_run)\nbut the usual way to run multiple commands concurrently is\n`npm run watch-js & npm run watch-css`. That's fine but it's hard to keep\non track of different outputs. Also if one process fails, others still keep running\nand you won't even notice the difference.\n\nAnother option would be to just run all commands in separate terminals. I got\ntired of opening terminals and made **concurrently**.\n\n### NPM Issue\n\nPreviously I thought this could fix some problems I had with watching scripts and this readme said:\n\n> When running watch or serve tasks, I'd recommend to use `--kill-others` option:\n>\n> ```bash\n> concurrently --kill-others \"npm run watch-js\" \"npm run watch-less\"\n> ```\n>\n> That way, if for some reason e.g. your `watch-less` died, you would notice it easier.\n\nHowever NPM didn't work as I hoped it would. See [this issue](https://github.com/kimmobrunfeldt/concurrently/issues/4).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kimmobrunfeldt/concurrently.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "3.4.0"
}
